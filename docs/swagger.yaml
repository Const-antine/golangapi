basePath: /v1
definitions:
  models.Err:
    properties:
      body:
        type: object
      severity:
        type: string
    type: object
  models.User:
    properties:
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: kostia.bond4444@gmail.com
    name: Constantine Bond
  description: Swagger API for Golang API first project.
  license:
    name: MIT
  termsOfService: http://swagger.io/terms/
  title: Golang API project
  version: "1.0"
paths:
  /users:
    get:
      description: Fetches all available users from DB
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Err'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Err'
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create/Add new user to DB via POST request
      parameters:
      - description: Specification for user which should be added
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Err'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Err'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Err'
      summary: Create new user
      tags:
      - Users
  /users/{id}:
    get:
      description: Fetches all details about specific user depending on provided id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Err'
      summary: Get details about user
      tags:
      - Users
swagger: "2.0"
